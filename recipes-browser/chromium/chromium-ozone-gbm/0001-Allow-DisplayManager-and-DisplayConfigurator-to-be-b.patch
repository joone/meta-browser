From 33b9b5d18e95fed2010fad43ed53c4b8fd61788f Mon Sep 17 00:00:00 2001
From: Joone Hur <joone.hur@intel.com>
Date: Tue, 9 Jan 2018 00:03:05 +0000
Subject: [PATCH 01/14] Allow DisplayManager and DisplayConfigurator to be
 build for ozone-gbm

This CL allow DisplayManager and DisplayConfigurator to be build without
OS_CHROMEOS build macro.
---
 ui/display/manager/BUILD.gn                      | 4 ++++
 ui/display/manager/display_change_observer.cc    | 3 ++-
 ui/display/manager/display_configurator.cc       | 6 ++++++
 ui/display/manager/display_manager.h             | 8 ++++----
 ui/display/manager/touch_transform_controller.cc | 4 ++++
 5 files changed, 20 insertions(+), 5 deletions(-)

diff --git a/ui/display/manager/BUILD.gn b/ui/display/manager/BUILD.gn
index 66954c3d2bd6..2a806919c360 100644
--- a/ui/display/manager/BUILD.gn
+++ b/ui/display/manager/BUILD.gn
@@ -71,6 +71,10 @@ jumbo_component("manager") {
 
   defines = [ "DISPLAY_MANAGER_IMPLEMENTATION" ]
 
+  if (build_display_configuration) {
+    defines += [ "DISPLAY_CONFIGURATION" ]
+  }
+
   if (is_chromeos) {
     deps += [ "//chromeos" ]
   }
diff --git a/ui/display/manager/display_change_observer.cc b/ui/display/manager/display_change_observer.cc
index dd5bd464be2e..e6cae6754b83 100644
--- a/ui/display/manager/display_change_observer.cc
+++ b/ui/display/manager/display_change_observer.cc
@@ -197,10 +197,11 @@ void DisplayChangeObserver::OnDisplayModeChanged(
 
     displays.emplace_back(CreateManagedDisplayInfo(state, mode_info));
   }
-
+#if defined(OS_CHROMEOS)
   display_manager_->touch_device_manager()->AssociateTouchscreens(
       &displays,
       ui::InputDeviceManager::GetInstance()->GetTouchscreenDevices());
+#endif
   display_manager_->OnNativeDisplaysChanged(displays);
 
   // For the purposes of user activity detection, ignore synthetic mouse events
diff --git a/ui/display/manager/display_configurator.cc b/ui/display/manager/display_configurator.cc
index a780b56ef79a..25d9c4e288f4 100644
--- a/ui/display/manager/display_configurator.cc
+++ b/ui/display/manager/display_configurator.cc
@@ -187,8 +187,10 @@ DisplayConfigurator::DisplayLayoutManagerImpl::ParseDisplays(
 
   // Hardware mirroring doesn't work on desktop-linux Chrome OS's fake displays.
   // Skip mirror mode setup in that case to fall back on software mirroring.
+#if defined(OS_CHROMEOS)
   if (!chromeos::IsRunningAsSystemCompositor())
     return cached_displays;
+#endif
 
   if (cached_displays.size() <= 1)
     return cached_displays;
@@ -526,7 +528,11 @@ DisplayConfigurator::DisplayConfigurator()
     : state_controller_(NULL),
       mirroring_controller_(NULL),
       is_panel_fitting_enabled_(false),
+#if defined(OS_CHROMEOS)
       configure_display_(chromeos::IsRunningAsSystemCompositor()),
+#else
+      configure_display_(true),
+#endif
       current_display_state_(MULTIPLE_DISPLAY_STATE_INVALID),
       current_power_state_(chromeos::DISPLAY_POWER_ALL_ON),
       requested_display_state_(MULTIPLE_DISPLAY_STATE_INVALID),
diff --git a/ui/display/manager/display_manager.h b/ui/display/manager/display_manager.h
index f95cffaa5044..26abbe3c9907 100644
--- a/ui/display/manager/display_manager.h
+++ b/ui/display/manager/display_manager.h
@@ -32,7 +32,7 @@
 #include "ui/display/types/display_constants.h"
 #include "ui/display/unified_desktop_utils.h"
 
-#if defined(OS_CHROMEOS)
+#if defined(DISPLAY_CONFIGURATION)
 #include "base/cancelable_callback.h"
 #include "base/optional.h"
 #include "ui/display/manager/display_configurator.h"
@@ -78,7 +78,7 @@ class DISPLAY_MANAGER_EXPORT DisplayManager
     virtual void PreDisplayConfigurationChange(bool clear_focus) = 0;
     virtual void PostDisplayConfigurationChange() = 0;
 
-#if defined(OS_CHROMEOS)
+#if defined(DISPLAY_CONFIGURATION)
     // Get the DisplayConfigurator.
     virtual DisplayConfigurator* display_configurator() = 0;
 #endif
@@ -134,7 +134,7 @@ class DISPLAY_MANAGER_EXPORT DisplayManager
   // Returns the display id of the first display in the outupt list.
   int64_t first_display_id() const { return first_display_id_; }
 
-#if defined(OS_CHROMEOS)
+#if defined(DISPLAY_CONFIGURATION)
   TouchDeviceManager* touch_device_manager() const {
     return touch_device_manager_.get();
   }
@@ -685,7 +685,7 @@ class DISPLAY_MANAGER_EXPORT DisplayManager
   // OnWillProcessDisplayChanges() and OnDidProcessDisplayChanges().
   int notify_depth_ = 0;
 
-#if defined(OS_CHROMEOS)
+#if defined(DISPLAY_CONFIGURATION)
   std::unique_ptr<TouchDeviceManager> touch_device_manager_;
 
   // A cancelable callback to trigger sending UMA metrics when display zoom is
diff --git a/ui/display/manager/touch_transform_controller.cc b/ui/display/manager/touch_transform_controller.cc
index 4b7602d035d7..4b379d7ed33e 100644
--- a/ui/display/manager/touch_transform_controller.cc
+++ b/ui/display/manager/touch_transform_controller.cc
@@ -360,9 +360,13 @@ void TouchTransformController::UpdateTouchTransforms(
       // In mirror mode, there is just one WindowTreeHost and two displays.
       // Make the WindowTreeHost accept touch events from both displays.
       std::size_t touch_display_index =
+#if defined(OS_CHROMEOS)
           display_manager_->SoftwareMirroringEnabled()
               ? primary_display_id_index
               : index;
+#else
+          index;
+#endif
       UpdateTouchTransform(display_id_list[primary_display_id_index],
                            display_info_list[index],
                            display_info_list[touch_display_index], update_data);
-- 
2.20.1

